Docker 守护程序（Docker Daemon）是 Docker 架构的核心组件之一，它负责管理 Docker 的各种资源，包括镜像、容器、网络和存储卷等。以下是对其的深入理解以及构建上下文的工作原理：

1. Docker daemon 概述
    Docker 守护程序（dockerd, docker daemon）是一个后台进程，监听来自客户端（如 Docker CLI 或其他工具）的请求，并处理这些请求。它运行在容器的宿主机上，是整个 Docker 架构的核心。客户端通过 API 或命令行界面（CLI）与守护程序通信。
    负责：1）管理 Docker 镜像，包括拉取、构建、存储和删除等操作。2）创建和管理容器，包括启动、停止、重启、暂停、删除等操作。3）管理网络，为容器分配网络接口，并设置容器之间的通信规则。4）管理存储卷，为容器提供数据持久化能力。5）执行安全策略，如隔离容器、限制资源等。6）与注册表（Registry）交互，用于拉取和推送镜像。

2. Context 构建过程中的上下文
    当运行 docker build 命令时，Docker 守护程序需要一个上下文（Context）来构建镜像。上下文通常是一个目录，包含构建过程中需要的所有文件，包括 Dockerfile 和依赖文件。
    2.1 上下文的发送
    递归打包：在大多数情况下，Docker 守护程序会将构建上下文中的所有内容（递归地）打包成一个 tar 包，并发送到守护程序。这个过程中，守护程序会将上下文目录中的所有文件和子目录都包含进来。
    触发构建：只有当 Docker 守护程序收到完整的上下文后，才会开始根据 Dockerfile 中的指令来构建镜像。
    2.2 最佳实践：保持上下文精简
    空目录作为上下文：建议使用一个空目录作为上下文，并将 Dockerfile 和构建所需的文件（如源代码、配置文件等）放置在这个目录中。这样可以确保上下文只包含必要的文件，避免不必要的文件被发送到守护程序。
    避免包含无关文件：构建上下文中的无关文件会增加上下文的大小，导致构建过程变慢，并且浪费时间和带宽。例如，如果上下文目录下有大型的二进制文件或不必要的日志文件，应该使用 .dockerignore 文件排除这些文件。
    2.3 .dockerignore
    为了进一步优化构建过程，可以使用 .dockerignore 文件来排除不需要的文件。这个文件类似于 Git 的 .gitignore 文件，用于指定哪些文件或目录不会被包含在构建上下文中。
    示例 .dockerignore 文件
    .git
    node_modules/
    logs/
    *.log
    通过上述文件内容，排除了版本控制系统相关文件（.git文件夹），排除编译生成的文件或临时文件（如 .DS_Store 或 Thumbs.db），排除敏感文件或配置文件（如 .env 文件）。

3. 优化构建数据流技术
    为了减少构建上下文的大小，Docker 守护程序（Docker Daemon）会尽可能复用之前构建的缓存。如果上下文中的文件没有变化，Docker 守护程序可以使用缓存的镜像层来加速构建过程。
    缓存重用:当 Docker 镜像的某一层没有变化时，Docker 守护程序会直接重用缓存的镜像层，而不是重新构建。缓存可以显著减少构建时间，特别是在大型项目中。
    数据流的压缩:Docker 守护程序会尝试压缩构建上下文中的数据，以便更快地传输。例如，如果上下文中有许多小文件，压缩可以显著减少传输时间。

4. 上下文之外的文件访问限制
    从 Docker 守护程序的角度来看，构建上下文之外的文件是不可见的。因此，在 Dockerfile 中无法直接访问上下文之外的文件。例如：
    COPY /path/outside/context/app.py /
    如果 /path/outside/context 是上下文之外的目录，指令会失败，因为 Docker 守护程序无法访问这个路径。因此，开发人员需要确保所有构建所需的文件都位于上下文目录中。

5. Docker 构建缓存的失效
    当上下文中的文件发生变化或 Dockerfile 中的指令发生变化时，Docker 守护程序会重新构建镜像。缓存的失效条件包括：
    1）Dockerfile 中的 COPY 或 ADD 指令引入的文件发生变化。
    2）Dockerfile 中的 RUN 指令的内容发生变化。
    3）上下文中的文件被重新打包或修改。